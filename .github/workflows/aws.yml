name: Deploy to AWS ECR and ECS

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  pull_request:
    branches:
      - main  # Trigger on pull request to main branch

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up the TAG environment variable
        run: echo "TAG=$(git rev-parse --short=4 HEAD)" >> $GITHUB_ENV

      - name: Output Tag Value
        run: echo "$TAG"

      # Set up AWS credentials
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 135581164469.dkr.ecr.us-east-1.amazonaws.com

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t andre/andreapp3 .

      # Tag the Docker image
      - name: Tag docker image with $TAG
        run: |
          docker tag andre/andreapp3:latest 135581164469.dkr.ecr.us-east-1.amazonaws.com/andre/andre:ecsimage${TAG}

      # Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push 135581164469.dkr.ecr.us-east-1.amazonaws.com/andre/andre:ecsimage${TAG}

      - name: Register ECS Task Definition
        run: |
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            echo '{
              "family": "my-ecs-task",
              "networkMode": "awsvpc",
              "executionRoleArn": "arn:aws:iam::135581164469:role/ecsTaskExecutionRole",
              "containerDefinitions": [
                {
                  "name": "dockergs",
                  "image": "'$AWS_ACCOUNT_ID'.dkr.ecr.us-east-1.amazonaws.com/andre/andreapp3:'$TAG'",
                  "cpu": 256,
                  "memory": 512,
                  "essential": true,
                  "portMappings": [
                    {
                      "containerPort": 5000,
                      "hostPort": 5000,
                      "protocol": "tcp"
                    }
                  ]
                }
              ]
            }' > task-definition.json
            aws ecs register-task-definition --cli-input-json file://task-definition.json
  
        # Update ECS Service to use the new Task Definition
      - name: Assume Role for ECS service update
        id: assume-role
        run: |
          ROLE_ARN="arn:aws:iam::135581164469:role/AWSServiceRoleForECS"
          SESSION_NAME="GitHubActionsSession"
          CREDS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name $SESSION_NAME)
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r .Credentials.AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r .Credentials.SessionToken)
  
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ecsCluster1 \
            --service my-ecs-service \
            --task-definition my-ecs-task \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-05a6864843a85e1f0,subnet-002e85e7be08ab721],securityGroups=sg-0038c39acc2cb1585}" \
            --load-balancer targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:135581164469:targetgroup/ecs-target-group/364bdc410a0483fa,containerName=dockergs,containerPort=5000 \
            --force-new-deployment

