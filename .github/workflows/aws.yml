name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  pull_request:
    branches:
      - main  # Trigger on pull request to main branch

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up AWS credentials
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t andre/andreapp3 .

      # Tag the Docker image
      - name: Tag Docker image
        run: |
          docker tag andre/andreapp3:latest 135581164469.dkr.ecr.us-east-1.amazonaws.com/andre/andre:$TAG

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 135581164469.dkr.ecr.us-east-1.amazonaws.com

      # Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push 135581164469.dkr.ecr.us-east-1.amazonaws.com/andre/andre:$TAG

      # Register ECS Task Definition with new image
      - name: Register ECS Task Definition
        run: |
          echo '{
            "family": "my-ecs-task",
            "containerDefinitions": [
              {
                "name": "dockergs",
                "image": "135581164469.dkr.ecr.us-east-1.amazonaws.com/andre/andre:$TAG",
                "cpu": 256,
                "memory": 512,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 5000,
                    "hostPort": 5000,
                    "protocol": "tcp"
                  }
                ]
              }
            ]
          }' > task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      # Update ECS Service to use the new Task Definition
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ecsCluster1 \
            --service my-ecs-service \
            --task-definition my-ecs-task \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-05a6864843a85e1f0,subnet-002e85e7be08ab721],securityGroups=sg-0038c39acc2cb1585}" \
            --force-new-deployment

